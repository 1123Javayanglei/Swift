/*:
 ## 为什么使用方法和属性？
 
 在本课中，你已经学习了一些微妙但功能强大的概念，可以帮助你编写代码。
 
 借助方法和属性，特定类型的每个实例都有一些可供访问的值集和一些可供使用的行为集。
 
 方法和属性通过将信息的相关部分（属性）和要执行的工作（方法）一起放在一个独立的包（实例）中，帮助分解大型程序的复杂性。
 
 以 `String` 为例，你可以在类型之外编写 `hasPrefix()` 函数，以采用一个字符串来进行测试，另一个字符串具有要检查的前缀：
 
 `func hasPrefix(fullString: String, prefixString: String)`
 
这种类型的函数称为顶层函数，因为它不会包含在其他任何内容中。到目前为止，你所编写的所有函数都是顶层函数。
 
但是，在顶层函数和变量之上使用方法和属性有很大的好处。
 
 - 将某个类型的功能与该类型本身放在一起可使代码更易于理解。
 - 自动填写运行更加顺畅：自动填写仅提供键入时可应用的方法。如果所有方法都是顶层函数，那么无论何时开始键入，系统中的每个函数都会显示出来。
 - 文档更易于组织和查找：你将如何对处理字符串或数字的所有顶层函数进行分类？如果某个函数同时处理两者呢？你要如何搜索此文档？
 
 在本课程稍前部分，你已经学习了函数可以隐藏许多复杂性，同时又不失易用性，尤其是其名称能够清楚地表达其目的时候更是如此。具有方法和属性的实例就是这种理念的延伸。你知道 `String` 的每个实例可以告诉你它“是否是空的”，或者它是否“有前缀”与所传入的字符串匹配。你看不到提供答案的实例背后的复杂性。当你使用字符串时，只需要调用方法和属性来完成作业——`String` 类型会处理所有细节。

[上一页](@previous)  |  第 13 页，共 17 页  |  [下一页：总结](@next)
*/


