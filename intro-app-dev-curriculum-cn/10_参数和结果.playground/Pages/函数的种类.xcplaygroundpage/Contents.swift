/*:
 ## 函数的种类
 
 编写函数时，现在有四种可能的参数与返回值的组合。下面简要描述了每种类型的函数可能的使用时机：
 
 **❌ 参数, ❌ 返回值**\
 `paintPicture()`

 如果调用的函数没有任何参数且不会返回任何值，就好像在说：“我希望有事情发生，但我不是特别在意它是怎么发生的，或者之后会发生什么。”
 
 想象一下，你请一位画家为你画一幅画。如果你使用 `paintPicture()` 这样的函数，这位画家会随意画他们想画的任何东西，然后永久地将完成的作品挂在他们喜欢的任何一面墙上，甚至可能在另一个城市。 
 
 调用这种类型的函数可以节省作决策的工作，但也需要许多的信任。这个函数自行完成工作，也不会返回任何信息，但是可能对事物产生不受你控制的影响。
 
 BoogieBot 舞蹈动作属于这种类型的函数。函数名称会告诉 BoogieBot 做什么动作。它的“工作”就是动作本身。
 
 **✅ 参数, ❌ 返回值**\
 `paintPicture(width: Int, height: Int, dominantColor: UIColor)`
 
 这些函数根据自变量的变化来完成操作，但是不会返回任何值。
 
 现在，你可以要求这位画家画一幅特定尺寸的画，或许使用特定的颜色基调或画上你喜爱的风景。你对执行的工作进行更多的控制，但是画家仍掌握绘画的主控权，并且可以随意将画挂在任何地方。
 
 `hello(name:)` 函数就是这样的例子。你控制名称，而“工作”将字符串打印到控制台。
 
 **❌ 参数, ✅ 返回值**\
 `paintPicture() -> Painting`

 这种类型的函数不需要任何额外信息就可返回值。
 
 想象一下，你没有向画家提供任何输入参数，因此他们完全按照自己的意愿作画。作品完成之后，他们直接将成品画作交给你。现在，你可以将画作挂起来、售卖，甚至自己在该画作基础上进行再创作。

 本课程进行到目前为止，还没有出现过这种组合方式的函数。提供随机数或显示当前日期和时间的函数可能就是这样的函数。
 
 **✅ 参数, ✅ 返回值**\
 `paintPicture(width: Int, height: Int, dominantColor: UIColor) -> Painting`

 这种类型的函数基于传入的信息提供返回值。它接受所有输入建议并将它们转换为新的输出值。
 
 在本例中，你的输入是让画家画你所喜欢的画并将成品画作交给你，之后你可以完全按照自己的意愿进行处理。
 
 `spaceAvailableMessage(eachVideoDuration:, numberOfVideos:)` 函数属于这种类型的函数。
 
 > (注): \
 当函数执行一些与返回值无关的工作时（例如，打印到控制台或让 BoogieBot 跳舞），这样的工作叫做“副作用”。命名函数时，最好是以某种方式在名称中包含副作用，如 `leftArmUp()`。如果函数没有返回值，那么其所有工作都将视为副作用。
 
 在下一页中，我们来学习函数可以通过怎样的方式让任务更容易理解。
 
[上一页](@previous)  |  第 8 页，共 17 页  |  [下一页：构造块](@next)
*/
