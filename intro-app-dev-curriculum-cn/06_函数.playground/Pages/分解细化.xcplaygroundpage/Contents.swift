/*:
 ## 分解细化
 
 童谣的每一节都遵循一种模式：
 
 - 每一节的前两行是相同的。
 - 每一节的后两行发生变化。
 - 每节之间停顿一会儿。
 
 当程序员面临一个长长的任务列表（例如，打印原始童谣）时，他们通常会将一个长列表分解成多个小列表。这叫做_“分解”_。你在确定要如何分解列表的时候，找到有意义的最小工作单位是一种非常有效的方式。例如，要将一个节分成多个有意义的函数，你可以执行以下操作：
*/
func rowTheBoat() {
    print("划呀划，划小船")
    print("沿着溪流缓缓行")
}

func merrilyDream() {
    print("多轻松，多高兴")
    print("人生如梦不愿醒")
}

func breatheBetweenVerses() {
    print("        ~        ")
}
//: 现在，你可以使用以下函数打印第一节，以及第二节的开头，如下所示：
rowTheBoat()
merrilyDream()
breatheBetweenVerses()
rowTheBoat()
//: - callout(Exercise): (练习):\
//: 为第二节的后两行编写名为 `crocodileScream()` 的函数，然后调用该函数，在控制台中完成歌谣。











//: 接下来，我们来学习如何将多个任务组合到一起。
//:
//: [上一页](@previous)  |  第 5 页，共 12 页  |  [下一页：函数套函数](@next)
