/*:
 ## 单项工作
 
 你可以将要反复使用的代码包在函数中。你可以像曾经使用 *let*`“声明”`常量的名称那样，使用 `func` 来声明函数。
 
 由于函数可以包含多行代码，因此声明起来会稍微复杂一点。下面是一个非常简单的函数：
*/
func rowTheBoat() {
    print("划呀划，划小船")
    print("沿着溪流缓缓行")
}
/*:
 函数的_“名称”_是 `rowTheBoat()`。稍后会进一步讲解有关 `()` 的内容，现在你只要记住，任何后面带有括号的标识符都是函数。
 
 两个大括号 `{`...`}` 之间的代码称为函数的*“主体”*。
 
 这些代码行与你在 playground 中看到的其他代码行不同。在结果边栏或控制台中不会显示任何结果。这是因为_“声明”_函数只是描述该函数运行时会执行的操作。 
 
 要实际运行代码，必须_“调用”_函数。键入函数的名称即会调用该函数。取消注释以下行：
*/
// rowTheBoat()
/*:
 在 playground 中调用函数后，边栏中会显示结果。调用 `rowTheBoat` 函数也会将文本打印到下面的控制台区域中。

 - callout(Exercise): (练习):\
 自己编写一个会在控制台中打印的函数，然后调用你的新函数。注意看上面的示例，牢记括号 `()` 和大括号 `{}` 分别都应该使用在哪些地方。
 如果多次调用函数，会出现什么情况？

*/







//: 接下来，我们来学习如何思索任务并进行合理划分。
//:
//: [上一页](@previous)  |  第 4 页，共 12 页  |  [下一页：分解细化](@next)
