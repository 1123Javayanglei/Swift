/*:
 ## 无限循环

 程序员有时会犯_“函数调用自身”_的错误。也就是说，当调用函数时，它会调用自身，而调用后的函数又调用自身，然后再调用自身...
 
 这种情况在现实生活中的典型例子是洗发液瓶上的使用说明：“涂上洗发液、冲洗，然后再来一遍”。如果这些指示是代码，那么电脑会将它们解释为涂上洗发液、冲洗，然后再涂上洗发液、再冲洗，如此反复。你将永远也洗不完！
 
 这就叫做_“无限循环”_。实际上，这并不会无限进行下去，因为在大部分情况下，这会导致程序发生内存不足的问题而最终崩溃（或者洗发液用完了）。
 */

func rowTheBoat() {
    print("划呀划，划小船")
    print("沿着溪流缓缓行")
}

func merrilyDream() {
    print("多轻松，多高兴")
    print("人生如梦不愿醒")
}

func verseOne() {
    rowTheBoat()
    merrilyDream()
}

verseOne()

/*:
 - experiment:(体验):  通过以下方式在上述代码中加入无限循环：编辑 `verseOne` 函数，使之在调用 `merrilyDream()` 之后调用 `verseOne()`。查看控制台和结果边栏。移除该行来停止此循环。playground 可能要花一些时间才会恢复过来——无限循环是个“累人”的活。
 
 接下来，我们来学习函数是怎样将处理一大段程序变得简明易懂的。 
 
 [上一页](@previous)  |  第 7 页，共 12 页  |  [下一页：隐藏复杂性](@next)
*/
