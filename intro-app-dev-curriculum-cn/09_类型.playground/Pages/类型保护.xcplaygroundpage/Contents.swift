/*:
 ## 类型保护
 
 你已经看到，尝试将错误类型的值赋给变量会导致错误。事实上，Swift 不会让你使用错误或非预期的类型编写代码。这称为_“类型保护”_，可防止你在代码中犯各种错误。
 
 此外，当你尝试添加不同类型的值时，类型保护也会出来大显身手。

- experiment:(体验):  \
 取消注释下面所有代码行，并检查由此产生的错误。一次只能取消注释一行，因为 playground 将在发现第一个错误时停止。
*/
//"香蕉" + 1
//2 + "2"
/*:
 错误信息如下所示：
 
 `Binary operator '+' cannot be applied to operands of type 'String' and 'Int'`。
 
 这个有点吓人的句子道出了一些非常简单的事：
 
 - `Binary operator '+'：`+` 加法运算符（之前已经学过）称为_“二进制运算符”_。二进制运算符预期其左右两侧都有内容。
 - `cannot be applied to operands`：_“操作数”_是运算符处理的内容，例如，字符串“香蕉”或整数 2。
 - `of type 'String' and 'Int'：`+` 左右两侧的内容是 `String` 和 `Int`。`+` 不知道如何将两侧的内容加起来。_你_知道吗？
 
 - callout(Exercise): 
 (练习): \
 再编写一些错误的加法语句。编写每一行语句之前，尝试猜猜会产生什么错误。记住先将之前体验的代码行注释掉。
 */

1.34+1

2/3.14

4/5

4.0/5

4/5.0






//: 接下来，我们来学习 Swift 如何判断你在创建值时所指定的类型。
//:
//: [上一页](@previous)  |  第 5 页，共 13 页  |  [下一页：类型和字面量](@next)
