/*:
 ## 标准库之外
 
 程序员还可以通过将标准库中的类型和功能组合在一起以及向其中添加类型和功能，来创建自己的类型。随着课程的深入，你将创建自己的类型。
 
 - callout(Experiment):
 (体验):\
 挑出你在上一页体验中创建的某个类型，想象一下可以依据哪些类型对它进行定义。例如，`TrainingShoe` 可能使用 `Int` 作为大小，`String` 作为品牌名称，`Date` 作为发售日期，再使用一个 `Int` 作为价格（美元）。


 类型和功能可组合在一起形成集合，称为_“框架”_或_“库”_。你在制作 app 时，可以从 Xcode 随附的框架中进行挑选。一个非常重要的框架是 *Foundation* 框架。
 
 Foundation 框架引入了许多类型，用于代表比 Swift 标准库中的字符串或数字更具体的类型。例如，有用于日期、距离和电脑上文件的类型。
 
 这些额外的框架不会自动添加到你的程序中，因为你可能不需要它们。这就好像是你要去购物中心转一圈，没必要带上所有东西一样。
 
 在下一页中，你将学习如何将框架添加到程序。 
 
[上一页](@previous)  |  第 10 页，共 13 页  |  [下一页：导入框架](@next)
*/
