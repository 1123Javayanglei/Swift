//: ## 选择恰当的名称
//: 选择恰当的名称是编程的一个非常重要的部分。诚然，知道如何编写代码很重要，但更重要的是能够阅读和理解代码，因此程序员都希望选择恰当的名称。
//:
//: 目前为止，你已使用过 `numberOfDogs` 和 `numberOfCats` 这样的名称。这些名称都很好，因为它们清楚地描述了各自所代表的内容。
//:
//: 假设名称改为 `nd` 和 `nc`（代表狗的数量 (**n**umber of **d**ogs) 和猫的数量 (**n**umber of **c**ats)）。\
//: 甚至使用描述性更差的名称，如 `n1` 和 `n2`。
//:
//: Swift 会毫无怨言地接受这样的名称。但是，想象一下，当你假期归来再阅读这段代码。你还能记得 `nd` 或 `n1` 表示什么吗？而且，如果你将 playground 交给其他程序员，他们要如何知道那些名称应该代表什么含义呢？
//:
//:- callout(Just for fun):
//:(娱乐一下):   在 Swift 中，名称中可以使用表情符号。这种命名方式当然并不值得提倡，不过这很有趣。以下是在名称中使用表情符号重新完成的宠物问题。
let 🐶 = 8
let 🐱 = 4
let 🐹 = 2
let 🐢 = 3
let 🐍 = 1
let 🐷 = 1
let 🐟 = 1

let totalNumberOfAnimals = 🐶 + 🐱 + 🐹 + 🐢 + 🐍 + 🐷 + 🐟

let totalNumberOfMammals = 🐶 + 🐱 + 🐹 + 🐷

//:- callout(Why not?):
//:(为什么不建议使用这种方式呢？):   为什么不在名称中使用表情符号呢？一个原因是表情符号乍看之下很难分辨。另一个原因是表情符号并非适用每一种情况。如果有人将宠物狼蛛带来宠物秀怎么办？没有匹配的表情符号。使用单词就更加灵活可靠得多。
//:
//: 接下来，我们来学习你一直以来执行的这些操作的正式名称。
//:
//:[上一页](@previous)  |  第 7 页，共 14 页  |  [下一页：程序员的行业术语](@next)
